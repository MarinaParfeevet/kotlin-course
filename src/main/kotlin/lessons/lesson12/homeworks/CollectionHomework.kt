package ru.stimmax.lessons.lesson12.homeworks

import lessons.lesson09.homeworks.containsString

fun main() {

    //Задачи на приведение коллекции к значению
//    1.Проверить, что размер коллекции больше 5 элементов.
    val col = listOf(1, 4, 1, 9, -3)
    if (col.size > 5) {
        println("yes")
    } else {
        println("no")
    }
//    2.Проверить, что коллекция пустая
    val b = col.isEmpty()
//    3.Проверить, что коллекция не пустая
    val c = col.isNotEmpty()
//    4.Взять элемент по индексу или создать значение если индекса не существует
    val d = col.getOrElse(3) { 999 }
//    5.Собрать коллекцию в строку
    val e = col.joinToString(separator = " ^ ")
    println(e)
//    6.Посчитать сумму всех значений
    val s = col.sum()
//    7.Посчитать среднее
    val av = col.average()
//    8.Взять максимальное число
    val max = col.maxOrNull()
//    9.Взять минимальное число
    val min = col.minOrNull()
//    10.Взять первое число или null
    val f = col.firstOrNull()
//    11.Проверить что коллекция содержит элемент
    if (5 in col) {
        println("yes")
    } else {
        println("no")
    }


//    Задачи на обработку коллекций
//    12.Отфильтровать коллекцию по диапазону 18-30
    val p = col.filter { it in 18..30 }
//    13.Выбрать числа, которые не делятся на 2 и 3 одновременно
    val ch = col.filterNot { it % 2 == 0 && it % 3 == 0 }
//    14.Очистить текстовую коллекцию от null элементов
    val j = col.filterNotNull()
//    15.Преобразовать текстовую коллекцию в коллекцию длин слов
    val str = listOf("cat", "dog", "bird", "cucumber", "doc", "fish")
    val lk = str.map { it.length }
//    16.Преобразовать текстовую коллекцию в мапу, где ключи - перевёрнутые слова, а значения - длина слов
    val rt = str.associate { it.reversed() to it.length }
//    17.Отсортировать список в алфавитном порядке
    val l = str.sorted()
//    18.Взять первые 3 элемента списка
    val h = str.take(3)
//    19.Распечатать квадраты элементов списка
    col.forEach { println(it * it) }
//    20.Группировать список по первой букве слов
    val g = str.groupBy { it[0] }
//    21.Очистить список от дублей
    var so = col.distinct()
//    22.Отсортировать список по убыванию
    val sd = col.sortedDescending()
//    23.Взять последние 3 элемента списка
    val ll = col.takeLast(3)

    //task 24
    println(getStringMapDescription(listOf<Int>()))
    println(getStringMapDescription(listOf<Int>(4, 5, 0)))
    println(getStringMapDescription(listOf<Int>(0, 8, 78, 9, 9, 9, 9)))
    println(getStringMapDescription(listOf<Int>(12345, 98765, 4353465, 23453, 2354567, 10001, 12345)))
    println(getStringMapDescription(listOf<Int>(9, 10, 11, 9, 10, 11)))
    println(getStringMapDescription(listOf<Int>(1, 2, 2, 4, 5, 6, 7, 8, 9, 0, 12, 14, 16, 18, 20)))
    println(getStringMapDescription(listOf<Int>(-11, -90, -87, -98 - 45, -46, -98)))
    println(getStringMapDescription(listOf<Int>(1045, 6789, 1234, 3456, 1002, 6543)))
    println(getStringMapDescription(listOf<Int>(14, 8, 0, 3, 5)))
    println(getStringMapDescription(listOf<Int>(14, 8, 8, 8, 8, 8, 8, 0, 8, 5)))

    //task 25
    val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
    println(analiseMarks(grades))

    //task 26
    val list = listOf(
        "Стол",
        "табурет",
        "ваза",
        "Кружка",
        "Зеркало",
        "ковер",
        "Шкаф",
        "часы",
        "Люстра",
        "подушка",
        "Картина",
        "столик",
        "Вазон",
        "шторы",
        "Пуф",
        "книга",
        "Фоторамка",
        "светильник",
        "Коврик",
        "вешалка",
        "Подставка",
        "телевизор",
        "Комод",
        "полка",
        "Абажур",
        "диван",
        "Кресло",
        "занавеска",
        "Бра",
        "пепельница",
        "Глобус",
        "статуэтка",
        "Поднос",
        "фигурка",
        "Ключница",
        "плед",
        "Тумба",
        "игрушка",
        "Настенные часы",
        "подсвечник",
        "Журнальный столик",
        "сувенир",
        "Корзина для белья",
        "посуда",
        "Настольная лампа",
        "торшер",
        "Этажерка"
    )
    println(createCatalog(list))

    //task 27
    println(countAverage(list))

    //task 28
    val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
    println(categorise(numbers))

    //task 29
    val ages = listOf(22, 18, 30, 45, 17, null, 60)
    val element = 18
    println(findFirstElement(ages, element))
}

//    Задача 24. Характеристика числовой коллекции
//    Напиши функцию, которая принимает коллекцию чисел и возвращает строку с
//    характеристикой коллекции используя конструкцию when
//    Если коллекция пустая - “Пусто”
//    Если количество элементов меньше пяти - “Короткая”
//    Если коллекция начинается с 0 - “Стартовая”
//    Если сумма всех чисел больше 10000 - “Массивная”
//    Если среднее значение равно 10 - “Сбалансированная”
//    Если длина строки образованная склеиванием коллекции в строку равна 20 - “Клейкая”
//    Если максимальное число меньше -10 - “Отрицательная”
//    Если минимальное число больше 1000 - “Положительная”
//    Если содержит одновременно числа 3 и 14 - “Пи***тая”
//    Иначе - “Уникальная”
//    Вызвать метод с данными, подходящими под каждую из веток
fun getStringMapDescription(m: List<Int>): String {
    return when {
        m.isEmpty() -> "Пусто"
        m.size < 5 -> "Короткая"
        m.first() == 0 -> "Стартовая"
        m.min() > 1000 -> "Положительная"
        m.sum() > 1000 -> "Массивная"
        m.average().toInt() == 10 -> "Сбалансированная"
        m.joinToString(separator = "").length == 20 -> "Клейкая"
        m.max() < -10 -> "Отрицательная"
        m.contains(3) && m.contains(14) -> "Пи***тая"
        else -> "Уникальная"
    }

}

//    Задача 25. Анализ учебных оценок
//    Напиши функцию, которая принимает список чисел и возвращает список чисел.
//    Пример данных: val grades = listOf(85, 58, 90, 74, 88, 67, 95, 92, 50, 42, 12)
//    Цель: Отфильтровать удовлетворительные оценки (>=60), отсортировать оставшиеся по возрастанию и взять первые 3.
//    Вызывай методы обработки и фильтрации последовательно один из другого, чтобы результат предыдущего метода
//    являлся основой для следующего.
fun analiseMarks(m: List<Int>): List<Int> {
    return m.filter { it > 60 }.sorted().take(3)
}

//    Задача 26. Создание каталога по первой букве
//    Напиши функцию, которая принимает список строк и возвращает словарь с ключом - буквой и значением - строкой.
//    Начальные значения: val list = listOf("Стол", "табурет", "ваза", "Кружка", "Зеркало", "ковер", "Шкаф", "часы", "Люстра", "подушка", "Картина", "столик", "Вазон", "шторы", "Пуф", "книга", "Фоторамка", "светильник", "Коврик", "вешалка", "Подставка", "телевизор", "Комод", "полка", "Абажур", "диван", "Кресло", "занавеска", "Бра", "пепельница", "Глобус", "статуэтка", "Поднос", "фигурка", "Ключница", "плед", "Тумба", "игрушка", "Настенные часы", "подсвечник", "Журнальный столик", "сувенир", "Корзина для белья", "посуда", "Настольная лампа", "торшер", "Этажерка" )
//    Цель: Привести все слова в списке к нижнему регистру, сгруппировать в каталог по первой букве используя метод groupBy
fun createCatalog(list: List<String>): Map<String, List<String>> {
    val lowList = list.map { it.lowercase() }
    return lowList.groupBy { it.first().lowercase() }
}

//    Задание 27. Подсчёт средней длины слов в списке
//    Напиши функцию, которая принимает список строк и возвращает строку.
//    Начальные значения взять из предыдущей задачи.
//    Цель: Перевести все слова в количество букв, подсчитать среднее значение. Вернуть форматированный текст с
//    двумя знаками после запятой, используя функцию format и подходящий шаблон.
fun countAverage(list: List<String>): String {
    val listCount = list.map { it.length }.average()
    return String.format("Средняя длина слова: %.2f", listCount)
}

//    Задание 28: Категоризация чисел
//    Напиши функцию, которая принимает список чисел и возвращает словарь с ключами - строками и значениями - числами.
//    Начальные значения: val numbers = listOf(1, 3, 5, 7, 3, 1, 8, 9, 9, 7)
//    Цель: Отобрать уникальные числа, отсортировать по убыванию и сгруппировать по четности (“четные” и “нечетные”).
fun categorise(list: List<Int>): Map<String, List<Int>> {
    return list.distinct().sortedDescending().groupBy { if (it % 2 == 0) "четные" else "нечетные" }
}

//    Задание 29: Поиск первого подходящего элемента
//    Напиши функцию, которая принимает список чисел и число и возвращает nullable число.
//    Начальные значения: val ages = listOf(22, 18, 30, 45, 17, null, 60) и число для проверки возраста, например 18.
//    Цель: Найти первый возраст в списке, который соответствует условию (больше второго аргумента) и вернуть его,
//    либо null если значения не нашлось.
fun findFirstElement(list: List<Int?>, age: Int): Int? {
    for (elem in list) {
        if (elem == null) continue
        if (elem > age) return elem
    }
    return null
}


